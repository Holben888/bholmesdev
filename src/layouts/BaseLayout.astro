---
import "@fontsource/atkinson-hyperlegible/400.css";
import "@fontsource/atkinson-hyperlegible/700.css";
import "@fontsource/ranga/400.css";
import "@fontsource/ranga/700.css";
import "open-props/easings";
import "./tailwind.css";
import ranga400url from "@fontsource/ranga/files/ranga-latin-400-normal.woff2?url";
import ranga700url from "@fontsource/ranga/files/ranga-latin-700-normal.woff2?url";
import atkinson400url from "@fontsource/atkinson-hyperlegible/files/atkinson-hyperlegible-latin-400-normal.woff2?url";
import atkinson700url from "@fontsource/atkinson-hyperlegible/files/atkinson-hyperlegible-latin-700-normal.woff2?url";
import Nav from "../components/Nav.astro";
import type { MarkdownHeading, ImageMetadata } from "astro";
import { getImage } from "astro:assets";
import { ViewTransitions } from "astro:transitions";

type Props = {
  title?: string;
  description?: string;
  image?: ImageMetadata;
  headings?: MarkdownHeading[];
};
const {
  title = "Ben Holmes",
  description = "The whiteboard guy at Astro that codes kinda well.",
  headings,
  image = await getImage({ src: import("~/assets/bholmesdev.png") }),
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="author" content="Ben Holmes" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@bholmesdev" />
    <meta name="twitter:creator" content="@bholmesdev" />
    <meta name="description" content={description} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:image" content={image.src} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content="Ben Holmes" />
    <meta property="og:title" />
    <meta property="og:description" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link
      rel="preload"
      href={atkinson400url}
      as="font"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href={atkinson700url}
      as="font"
      crossorigin="anonymous"
    />
    <link rel="preload" href={ranga400url} as="font" crossorigin="anonymous" />
    <link rel="preload" href={ranga700url} as="font" crossorigin="anonymous" />
    <ViewTransitions fallback="none" />
    <slot name="head" />
    <title>{title}</title>
  </head>
  <body class="bg-gray-950 text-white text-base px-4 md:px-8">
    <my-shroud
      class="fixed inset-0 invisible bg-gray-950 opacity-0 z-30 data-[visible]:opacity-80 data-[visible]:visible transition-all"
    ></my-shroud>
    <Nav headings={headings} />
    <div>
      <slot />
    </div>
    <style is:global>
      :root {
        --purple-hs: 263.1 100%;
        --purple: hsl(var(--purple-hs) 50%);
        --purple-light: hsl(var(--purple-hs) 80%);
      }

      @media (prefers-color-scheme: dark) {
        :root {
          --purple: hsl(var(--purple-hs) 57%);
        }
      }

      h1 {
        font-family: var(--font-family-heading);
      }

      button {
        cursor: pointer;
      }
    </style>
    <script>
      import { effect } from "~/lib/effect";
      import { isDrawing } from "~/stores";
      import { controller, attr } from "@github/catalyst";
      import { Signal } from "signal-polyfill";

      @controller
      class MyShroudElement extends HTMLElement {
        @attr visible = false;

        #disconnect = new AbortController();

        connectedCallback() {
          const smBreakpointMatches = new Signal.State(false);
          window.matchMedia("(min-width: 640px)").onchange = ({ matches }) => {
            smBreakpointMatches.set(matches);
          };

          effect(() => {
            this.visible = isDrawing.get() && !smBreakpointMatches.get();
          }, this.#disconnect);
        }

        disconnectedCallback() {
          this.#disconnect.abort();
        }
      }
    </script>
  </body>
</html>
