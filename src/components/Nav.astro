---
import type { MarkdownHeading } from "astro";
import { isMatch } from "./Nav";
import Toc from "./TOC.astro";
import { scope } from "simple:scope";

type Props = {
  headings: MarkdownHeading[] | undefined;
};

const { headings } = Astro.props;
const id = scope("nav");

// Remove trailing slashes
const urlPath = new URL(Astro.request.url).pathname.replace(/\/$/, "") || "/";

type ListItem = { label: string; path: string };
const links: ListItem[] = [
  { label: "Ben", path: "/" },
  { label: "Blog", path: "/blog" },
  { label: "Talks", path: "/talks" },
  { label: "Videos", path: "/videos" },
];
---

<nav-open data-open class="group">
  <nav
    class="sticky top-0 max-w-[100ch] flex gap-6 items-center text-lg py-3 px-5 transition-colors duration-300"
  >
    {headings?.length ? <Toc {headings} /> : null}
    <ul transition:persist id={id} class="flex gap-6 ml-auto items-center">
      {
        links.map((l, idx) => (
          <li
            class="invisible opacity-0 group-[[data-open]]:opacity-100 group-[[data-open]]:visible"
            style={{ "--idx": idx + 1 }}
          >
            <a
              data-targets="nav-open.links"
              data-active={isMatch(urlPath, l.path)}
              class="no-underline text-lg block scale-100 text-gray-300 data-[active]:text-white data-[active]:font-bold data-[active]:scale-110 transition-transform ease-spring-5 duration-500"
              href={l.path}
            >
              {l.label}
            </a>
          </li>
        ))
      }
    </ul>
    <div>
      <button
        class="h-[20px] w-[25px] flex flex-col justify-between relative bg-transparent before:absolute before:-inset-1 before:-z-10 before:rounded-md"
        data-action="click:nav-open#toggle"
        data-target="nav-open.btn"
        aria-controls={id}
        aria-label="Toggle menu"
      >
        <div
          class="h-[3px] w-full rounded-full bg-current transition-transform origin-top-right group-[[data-open]]:-rotate-45"
        >
        </div>
        <div
          class="h-[3px] w-full rounded-full bg-current transition-transform origin-center group-[[data-open]]:scale-0"
        >
        </div>
        <div
          class="h-[3px] w-full rounded-full bg-current transition-transform origin-bottom-right group-[[data-open]]:rotate-45"
        >
        </div>
      </button>
    </div>
  </nav>
</nav-open>

<script>
  import { attr, target, targets, controller } from "@github/catalyst";
  import { isMatch } from "./Nav";
  import { toAttr } from "../utils.client";

  @controller
  export class NavOpenElement extends HTMLElement {
    @attr open = true;
    @target btn!: HTMLButtonElement;
    @targets links!: HTMLAnchorElement[];

    scrollY = 0;
    ticking = false;

    #abort = new AbortController();

    toggle() {
      this.open = !this.open;
      this.btn.ariaExpanded = toAttr(this.open);
    }

    connectedCallback() {
      document.addEventListener(
        "scroll",
        () => {
          this.scrollY = window.scrollY;

          if (!this.ticking) {
            window.requestAnimationFrame(() => {
              this.open = this.scrollY < 20;
              this.ticking = false;
            });

            this.ticking = true;
          }
        },
        { signal: this.#abort.signal }
      );
      document.addEventListener(
        "astro:page-load",
        () => {
          for (const link of this.links) {
            link.toggleAttribute(
              "data-active",
              isMatch(window.location.pathname, link.pathname)
            );
          }
        },
        { signal: this.#abort.signal }
      );
    }

    disconnectedCallback() {
      this.#abort.abort();
    }
  }
</script>

<style>
  li {
    transform: translateX(calc((4.5em - (var(--idx) * 1em))));
    transition-delay: calc(var(--idx) * 50ms);
    transition-timing-function: var(--transition-timing-function-spring-5);
    transition-duration: 500ms;
  }

  [data-open] li {
    transform: translateX(0);
    transition-delay: calc((4 - var(--idx)) * 50ms);
  }

  nav:before {
    --bg: var(--color-gray-950);
    content: "";
    position: absolute;
    inset: 0;
    bottom: -100%;
    pointer-events: none;
    background-image: linear-gradient(
      180deg,
      var(--bg) 0%,
      color-mix(in srgb, var(--bg) 90%, transparent) 22%,
      color-mix(in srgb, var(--bg) 80%, transparent) 32%,
      color-mix(in srgb, var(--bg) 60%, transparent) 40%,
      color-mix(in srgb, var(--bg) 50%, transparent) 48%,
      color-mix(in srgb, var(--bg) 40%, transparent) 55%,
      color-mix(in srgb, var(--bg) 30%, transparent) 62%,
      color-mix(in srgb, var(--bg) 20%, transparent) 70%,
      color-mix(in srgb, var(--bg) 10%, transparent) 80%,
      transparent 100%
    );
  }
</style>
