---
import type { MarkdownHeading } from "astro";
import Toc from "./TOC.astro";
import { scope } from "simple:scope";

type Props = {
  headings: MarkdownHeading[] | undefined;
};

const { headings } = Astro.props;
const id = scope("nav");

type ListItem = { label: string; href: string };
const links: ListItem[] = [
  { label: "Ben", href: "/" },
  { label: "Blog", href: "/blog" },
  { label: "Talks", href: "/talks" },
  { label: "Videos", href: "/videos" },
];
---

<nav-open data-open class="group">
  <nav
    class="group-[[data-open]]:dark:bg-gray-950 sticky top-0 max-w-[100ch] flex gap-4 items-center text-lg py-3 px-5 transition-colors duration-300"
  >
    {headings?.length ? <Toc {headings} /> : null}
    <ul id={id} class="flex gap-4 ml-auto items-center">
      {
        links.map((l, idx) => (
          <li style={{ "--idx": idx + 1 }}>
            <a class="no-underline" href={l.href}>
              {l.label}
            </a>
          </li>
        ))
      }
    </ul>
    <div>
      <button
        data-action="click:nav-open#toggle"
        data-target="nav-open.btn"
        aria-controls={id}
        class="h-[24px] w-[30px] flex flex-col justify-between relative p-0 bg-transparent before:content-[''] before:absolute before:inset-[-0.5rem] before:z-[-1] before:border-radius-[0.7rem] before:bg-[var(--bg-blur)]"
      >
        <div class="stripe stripe-top"></div>
        <div class="stripe stripe-middle"></div>
        <div class="stripe stripe-bottom"></div>
      </button>
    </div>
  </nav>
</nav-open>

<script>
  import { attr, target, controller } from "@github/catalyst";

  @controller
  export class NavOpenElement extends HTMLElement {
    @attr open = false;
    @target btn!: HTMLButtonElement;

    connectedCallback() {
      let scrollY = 0;
      let ticking = false;

      document.addEventListener("scroll", () => {
        scrollY = window.scrollY;

        if (!ticking) {
          window.requestAnimationFrame(() => {
            this.open = scrollY < 20;
            ticking = false;
          });

          ticking = true;
        }
      });
    }

    toggle() {
      this.open = !this.open;
      this.btn.toggleAttribute("aria-expanded", this.open);
    }
  }
</script>

<style>
  .toggle {
    height: 24px;
    width: 30px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
    padding: 0;
    background-color: transparent;
  }
  .toggle::before {
    content: "";
    position: absolute;
    inset: -0.5rem;
    z-index: -1;
    border-radius: 0.7rem;
    background-color: var(--bg-blur);
  }

  .stripe {
    height: 4px;
    width: inherit;
    background-color: currentColor;
    transition: transform 0.2s ease-in-out;
    border-radius: 4px;
  }
  .stripe.stripe-middle {
    transform-origin: center center;
    transition-property: transform, opacity;
  }
  .stripe.stripe-top {
    transform-origin: top right;
  }
  .stripe.stripe-bottom {
    transform-origin: bottom right;
  }
  [data-open] .stripe-top {
    transform: rotate(-45deg);
  }
  [data-open] .stripe-middle {
    opacity: 0;
    transform: scaleX(0);
  }
  [data-open] .stripe-bottom {
    transform: rotate(45deg);
  }

  li {
    opacity: 0;
    visibility: hidden;
    transform: translateX(calc((4.5em - (var(--idx) * 1em))));
    transition-delay: calc(var(--idx) * 50ms);
    transition-timing-function: theme(transitionTimingFunction.spring-3);
    transition-duration: 500ms;
  }

  [data-open] li {
    opacity: 1;
    visibility: visible;
    transform: translateX(0);
    transition-delay: calc((4 - var(--idx)) * 50ms);
  }
</style>
