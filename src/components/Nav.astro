---
import type { MarkdownHeading, TransitionAnimation } from "astro";
import Toc from "./TOC.astro";
import { scope } from "simple:scope";
import easings from "open-props/src/easing";

type Props = {
  headings: MarkdownHeading[] | undefined;
};

const { headings } = Astro.props;
const id = scope("nav");

// Remove trailing slashes
const path = new URL(Astro.request.url).pathname.replace(/\/$/, "") || "/";

function isMatch(linkPath: string) {
  if (linkPath === "/") return path === "/";
  return path.startsWith(linkPath);
}

type ListItem = { label: string; path: string };
const links: ListItem[] = [
  { label: "Ben", path: "/" },
  { label: "Blog", path: "/blog" },
  { label: "Talks", path: "/talks" },
  { label: "Videos", path: "/videos" },
];

const bounceAnim: TransitionAnimation = {
  name: "bounce",
  duration: 900,
  easing: "var(--ease-spring-5)",
};

function slide(duration = undefined) {
  return {
    forwards: {
      old: [
        {
          name: "astroFadeOut",
          duration: duration ?? "90ms",
          easing: easings["--ease-spring-5"],
          fillMode: "both",
        },
        {
          name: "scale",
          duration: duration ?? "220ms",
          easing: easings["--ease-spring-5"],
          fillMode: "both",
        },
      ],
      new: [
        {
          name: "astroFadeIn",
          duration: duration ?? "210ms",
          easing: easings["--ease-spring-5"],
          delay: duration ? void 0 : "30ms",
          fillMode: "both",
        },
        {
          name: "scale",
          duration: duration ?? "220ms",
          easing: easings["--ease-spring-5"],
          fillMode: "both",
        },
      ],
    },
    backwards: {
      old: [{ name: "astroFadeOut" }, { name: "astroSlideToRight" }],
      new: [{ name: "astroFadeIn" }, { name: "astroSlideFromLeft" }],
    },
  };
}
---

<nav-open data-open class="group">
  <nav
    class="group-[[data-open]]:dark:bg-gray-950 sticky top-0 max-w-[100ch] flex gap-6 items-center text-lg py-3 px-5 transition-colors duration-300"
  >
    {headings?.length ? <Toc {headings} /> : null}
    <ul id={id} class="flex gap-6 ml-auto items-center">
      {
        links.map((l, idx) => (
          <li style={{ "--idx": idx + 1 }}>
            <a
              data-active={isMatch(l.path)}
              class="no-underline text-lg"
              href={l.path}
            >
              {l.label}
            </a>
          </li>
        ))
      }
    </ul>
    <div>
      <button
        data-action="click:nav-open#toggle"
        data-target="nav-open.btn"
        aria-controls={id}
      >
        <div class="stripe stripe-top"></div>
        <div class="stripe stripe-middle"></div>
        <div class="stripe stripe-bottom"></div>
      </button>
    </div>
  </nav>
</nav-open>

<script>
  import { attr, target, controller } from "@github/catalyst";

  @controller
  export class NavOpenElement extends HTMLElement {
    @attr open = false;
    @target btn!: HTMLButtonElement;

    connectedCallback() {
      let scrollY = 0;
      let ticking = false;

      document.addEventListener("scroll", () => {
        scrollY = window.scrollY;

        if (!ticking) {
          window.requestAnimationFrame(() => {
            this.open = scrollY < 20;
            ticking = false;
          });

          ticking = true;
        }
      });
    }

    toggle() {
      this.open = !this.open;
      this.btn.toggleAttribute("aria-expanded", this.open);
    }
  }
</script>

<style>
  button {
    height: 20px;
    width: 25px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
    background-color: transparent;
  }
  button::before {
    content: "";
    position: absolute;
    inset: -0.3rem;
    z-index: -1;
    border-radius: 0.7rem;
    background-color: var(--bg-blur);
  }

  .stripe {
    height: 3px;
    width: inherit;
    background-color: currentColor;
    transition: transform 0.2s ease-in-out;
    border-radius: 4px;
  }
  .stripe.stripe-middle {
    transform-origin: center center;
    transition-property: transform, opacity;
  }
  .stripe.stripe-top {
    transform-origin: top right;
  }
  .stripe.stripe-bottom {
    transform-origin: bottom right;
  }
  [data-open] .stripe-top {
    transform: rotate(-45deg);
  }
  [data-open] .stripe-middle {
    opacity: 0;
    transform: scaleX(0);
  }
  [data-open] .stripe-bottom {
    transform: rotate(45deg);
  }

  a {
    display: block;
    scale: 1;
    transition: scale 0.5s var(--ease-spring-5);
  }
  a[data-active] {
    scale: 1.5;
  }

  li {
    opacity: 0;
    visibility: hidden;
    transform: translateX(calc((4.5em - (var(--idx) * 1em))));
    transition-delay: calc(var(--idx) * 50ms);
    transition-timing-function: theme(transitionTimingFunction.spring-3);
    transition-duration: 500ms;
  }

  [data-open] li {
    opacity: 1;
    visibility: visible;
    transform: translateX(0);
    transition-delay: calc((4 - var(--idx)) * 50ms);
  }
</style>
