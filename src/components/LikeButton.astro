---
import { Icon } from "astro-icon/components";
import { getLikes } from "~/utils.server";

type Props = {
  postSlug: string;
};

const { postSlug } = Astro.props;

const likes = await getLikes({ postSlug, ctx: Astro });
---

<like-button
  data-post-slug={postSlug}
  class="group/like flex items-center gap-4"
>
  <button
    data-action="click:like-button#toggleLike"
    class="w-[2.5em] h-[2.5em] bg-gradient-to-br from-slate-600 to-slate-900 rounded-full flex items-center justify-center"
  >
    <div
      class="group-data-[liked]/like:w-[75%] group-data-[liked]/like:h-[75%] w-[85%] h-[85%] rounded-full bg-gradient-to-br from-slate-800 to-slate-600 text-xl font-bold grid place-items-center transition-all -translate-y-[8%] group-data-[liked]/like:translate-y-0 ease-spring-5 duration-500"
    >
      <Icon
        name="heart"
        class="row-start-1 col-start-1 transition-colors text-slate-300 group-data-[liked]/like:text-red-400"
      />
      <Icon
        name="heart"
        class="row-start-1 col-start-1 transition-colors text-slate-300 group-data-[liked]/like:text-red-400 blur-0 group-data-[liked]/like:blur-[2px]"
      />
    </div>
  </button>
  <p
    data-target="like-button.text"
    class="group-data-[pending]/like:opacity-60 transition-opacity"
  >
    {likes}
  </p>
</like-button>

<script>
  import { actions } from "astro:actions";
  import { controller, attr, target } from "@github/catalyst";

  @controller
  class LikeButtonElement extends HTMLElement {
    @attr liked = Boolean(localStorage.getItem("isLike"));
    @attr postSlug = "";
    @attr pending = false;
    @target text: HTMLElement;

    async toggleLike() {
      this.liked = !Boolean(localStorage.getItem("isLike"));

      if (this.liked) {
        localStorage.setItem("isLike", "true");
      } else {
        localStorage.removeItem("isLike");
      }

      this.pending = true;
      const { data, error } = await actions.like.safe({
        postSlug: this.postSlug,
        liked: this.liked,
      });
      this.pending = false;

      // TODO: funny easter egg for too many requests
      if (error) return;

      this.text.textContent = data.likes.toString();
    }
  }
</script>
