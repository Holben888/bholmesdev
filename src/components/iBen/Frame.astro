---
import iBen from "./iBen.svg?raw";
import Button from "./Button.astro";
import CdDrive from "./CdDrive.astro";
import { getImgSrc, showcaseVideo } from "./Frame";
import { Icon } from "astro-icon/components";
import { scope } from "simple:scope";

const showcaseSrc = getImgSrc(showcaseVideo);
---

<div class="mt-24 px-2 sm:px-4 text-center max-w-prose mx-auto">
  <h2 class="text-5xl sm:text-7xl mb-4 font-heading">
    I make <span class="text-cyan-300 font-bold">videos</span>
  </h2>
  <p class="text-slate-400 text-xl leading-9">
    About the hardest parts of web dev. <strong
      class="text-slate-50 animate-pulse"
      ><a
        class="text-cyan-300"
        href="https://youtube.com/@bholmesdev?sub_confirmation=1">Subscribe</a
      ></strong
    > for practical examples, diagrams, and 60 second explainers.
  </p>
</div>
<RootElement id="videos" class="block sm:px-6 -mx-3">
  <div data-container class="py-8 max-w-prose mx-auto grid relative">
    <img
      data-glow
      src={showcaseSrc}
      alt=""
      class="pt-[0%] w-full"
      aria-hidden="true"
    />
    <div class="w-[89%] mt-[8.5%] mx-[5.5%] bg-slate-950 relative">
      <img
        data-thumbnail
        data-target="thumbnail"
        src={showcaseSrc}
        alt="A gud video"
        class="absolute top-0 w-full aspect-[3/2] leading-none object-cover"
      />
      <div
        data-scan-line-overlay
        class="absolute inset-0 pointer-events-none aspect-[3/2] flex flex-col justify-between"
      >
        <div data-scan-line class="w-full h-1 bg-slate-200 opacity-30"></div>
        <div
          data-btn-labels
          class="px-[7%] pb-[2%] pt-[10%] flex justify-between font-bold bg-gradient-to-t from-slate-950 to-transparent"
        >
          <span class="w-[6ch] flex flex-col items-center"
            >Play <Icon name="chevron-down" /></span
          >
          <span class="w-[6ch] flex flex-col items-center"
            >Random <Icon name="chevron-down" /></span
          >
        </div>
      </div>

      <template data-target="iframe-template">
        <iframe
          class="absolute top-0 w-full aspect-[3/2] h-auto"
          width="560"
          height="315"
          title="YouTube video player"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowfullscreen></iframe>
      </template>
    </div>
    <div
      data-computer
      class="z-10 m-auto w-full pointer-events-none"
      set:html={iBen}
    />
    <div
      data-btn-overlay
      data-target="cd-drive"
      class="absolute left-0 right-0 z-20 flex justify-between items-end px-[5%] h-[13%]"
    >
      <Button data-target={scope("play")} icon="play" aria-label="Play video" />

      <CdDrive />
      <Button
        data-target={scope("random")}
        icon="random"
        aria-label="Get random video"
      />
    </div>
  </div>
</RootElement>

<script>
  import { getEmbedSrc, getImgSrc, videoIds, showcaseVideo } from "./Frame";
  import {
    hideTemplate,
    showTemplate,
    fisherYatesShuffle,
  } from "../../utils.client";
  import { effect } from "~/lib/effect";
  import { Signal } from "signal-polyfill";

  const [_showcase, ...otherVideos] = videoIds;

  RootElement.ready(async ($) => {
    const playing = new Signal.State(false);
    const welcome = new Signal.State(false);
    const videoIdx = new Signal.State(0);
    const videoIds = [showcaseVideo, ...fisherYatesShuffle(otherVideos)];

    effect(() => {
      $.self.toggleAttribute("data-playing", playing.get());
      $.self.toggleAttribute("data-welcome", welcome.get());

      if (playing.get()) {
        const iframe = showTemplate($("iframe-template")) as HTMLIFrameElement;
        iframe.src = getEmbedSrc(videoIds[videoIdx.get()]!);
      } else {
        hideTemplate($("iframe-template"));
      }
    });

    $("play").addEventListener("click", () => {
      playing.set(!playing.get());
    });

    $("random").addEventListener("click", () => {
      playing.set(false);
      videoIdx.set((videoIdx.get() + 1) % videoIds.length);
      $<HTMLImageElement>("thumbnail").src = getImgSrc(
        videoIds[videoIdx.get()]!
      );
    });

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry?.isIntersecting) {
          welcome.set(true);
        }
      },
      { threshold: 0.7 }
    );

    observer.observe($("cd-drive"));

    return () => observer.disconnect();
  });
</script>

<style>
  #videos {
    --anim-delay: 0.5s;
  }

  #videos[data-welcome] [data-scan-line] {
    animation: scan 4s linear infinite;
    animation-delay: var(--anim-delay);
  }

  [data-scan-line-overlay] {
    background-image: linear-gradient(
      180deg,
      rgba(0, 0, 0, 0) 0%,
      rgba(0, 0, 0, 0.08) 50%,
      rgba(0, 0, 0, 0) 100%
    );
    background-size: 100% 6px;
    background-repeat: repeat;
  }

  @keyframes delayed-reveal {
    to {
      opacity: 1;
    }
  }

  [data-computer] :global(svg) {
    width: 100%;
    height: 100%;
  }

  [data-container] > * {
    /* Overlap all children in same grid column */
    grid-area: 1/1;
  }

  [data-glow] {
    filter: brightness(7) blur(50px) !important;
  }

  #videos[data-welcome] [data-glow] {
    visibility: visible;
    filter: brightness(7) blur(20px);
    transform: perspective(1000px) rotate3d(1, 0, 0, 4deg);
    transform-origin: bottom center;
    animation:
      glow-reveal 0.2s ease-in forwards,
      pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    animation-delay: var(--anim-delay);
    opacity: 0;
    scale: 0.8;
  }

  [data-thumbnail] {
    transform: perspective(1000px) rotate3d(1, 0, 0, 4deg);
    transform-origin: bottom center;
  }

  [data-thumbnail],
  [data-glow],
  [data-btn-labels] {
    visibility: hidden;
  }

  #videos[data-welcome] [data-thumbnail] {
    visibility: visible;
    filter: brightness(0.3);
    animation: img-reveal 0.3s ease-in forwards;
    animation-delay: var(--anim-delay);
    clip-path: ellipse(0% 0% at center);
  }

  #videos[data-welcome] [data-btn-labels] {
    opacity: 0;
    animation: delayed-reveal 0.3s ease-in forwards;
    animation-delay: var(--anim-delay);
    visibility: visible;
  }

  #videos[data-playing] :is([data-thumbnail], [data-btn-labels]) {
    visibility: hidden;
  }

  [data-btn-overlay] {
    bottom: calc(var(--spacing-6) + 4.4%);
  }

  [data-btn-overlay] :global([data-icon="random"]) {
    transition: transform 0.7s var(--ease-spring-2);
    transform-origin: center 45%;
  }
  [data-btn-overlay] :global(:is(button:hover) [data-icon="random"]) {
    transform: rotate(730deg);
  }

  @keyframes img-reveal {
    to {
      clip-path: ellipse(100% 100% at center);
      filter: brightness(1);
    }
  }

  @keyframes pulse {
    50% {
      opacity: 0.7;
    }
  }
  @keyframes glow-reveal {
    to {
      opacity: 1;
      scale: 1;
    }
  }
  @keyframes scan {
    to {
      transform: translateY(400px);
      opacity: 0;
    }
  }
</style>
