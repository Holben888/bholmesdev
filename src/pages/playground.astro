---
import { getEntry } from "astro:content";
import BaseLayout from "~/layouts/BaseLayout.astro";
import { Tweet } from "~/embeds/Tweet";
import { Sparkles } from "~/components/Sparkle";

const example = await getEntry("blog", "future-of-ui");
const { Content } = await example.render();
---

<BaseLayout title="Live edit">
  <main>
    <live-edit>
      <Content />
      <template data-id="sparkles">
        <Sparkles client:only="react">text</Sparkles>
      </template>
    </live-edit>
    <div hidden></div>
    <div class="fixed bottom-0 bg-slate-950 p-3 w-full">
      <label for="id">id</label>
      <input id="id" name="id" />
    </div>
  </main>
</BaseLayout>

<script>
  class LiveEdit extends HTMLElement {
    recordToBuffer = false;
    buffer = "";

    connectedCallback() {
      const tweet = this.querySelector(
        '[data-id="sparkles"]'
      ) as HTMLTemplateElement;

      this.contentEditable = "true";
      this.addEventListener("input", (e) => {
        if (!(e instanceof InputEvent)) return;

        if (e.data === " " && this.recordToBuffer) {
          const range = window.getSelection()?.getRangeAt(0);
          if (!range) return;
          // Select backwards by the length of the buffer.
          // -1 to account for the space
          range.setStart(
            range.startContainer,
            range.startOffset - this.buffer.length - 1
          );
          range.deleteContents();
          const el = tweet.content.cloneNode(true) as HTMLElement;
          range.insertNode(el);
          this.recordToBuffer = false;
          this.buffer = "";
        }

        if (e.data === "/") {
          this.recordToBuffer = true;
        }

        if (this.recordToBuffer) {
          if (e.inputType === "deleteContentBackward") {
            this.buffer = this.buffer.slice(0, -1);
          } else if (e.data) {
            this.buffer += e.data.toLowerCase();
          }
        }
      });
    }
  }
  window.customElements.define("live-edit", LiveEdit);
</script>

<style>
  main :global(article) {
    counter-reset: heading-counter;
  }

  main :global(article) :global(h3) {
    font-size: var(--font-size-xl);
    margin-block-start: 3rem;
  }

  main :global(article) :global(h4) {
    font-size: var(--font-size-lg);
    margin-block-start: 2.5rem;
  }

  main :global(article) :global(h2) {
    font-size: var(--font-size-2xl);
    margin-block-start: 5rem;
    position: relative;
  }

  main :global(article) :global(h2:before) {
    counter-increment: heading-counter;
    content: counter(heading-counter);
    position: absolute;
    border-radius: calc(infinity * 1px);
    background: var(--color-gray-900);
    height: 2.4em;
    width: 2.4em;
    top: -1.1em;
    left: -1em;
    display: flex;
    z-index: -1;
    line-height: 1.3;
    color: var(--color-gray-600);
    font-size: var(--font-size-2xl);
    font-family: var(--font-family-heading);
    justify-content: center;
  }

  h1,
  main :global(article) :global(:is(h2, h3, h4)) {
    font-weight: bold;
    line-height: 1.3;
  }

  main :global(article) :global(ol) {
    list-style: decimal;
  }

  main :global(article) :global(ul) {
    list-style: disc;
  }

  main :global(article) :global(:is(ol, ul)) {
    padding-inline-start: 1.5rem;
  }

  main :global(article) :global(:is(p, li)) {
    line-height: 1.7;
    margin-block: 1.3rem;
  }

  main :global(article) :global(a) {
    color: var(--color-primary-light);
    text-decoration: underline;
  }

  main :global(article) :global(li) {
    margin-block: 0.5rem;
  }

  main :global(article) :global(pre) {
    padding-inline: 1rem;
    padding-block: 1.3rem;
    border-radius: 0.4rem;
    line-height: 1.7;
    margin-block: 1rem;
    font-size: var(--font-size-sm);
  }
</style>
