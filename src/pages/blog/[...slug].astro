---
import { type CollectionEntry, getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((p) => ({ params: { slug: p.slug }, props: p }));
}

type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content, headings } = await post.render();
---

<BaseLayout {headings}>
  <article-scroll>
    <main class="max-w-prose m-auto px-3 mb-24">
      <h1 class="text-4xl mt-12">{post.data.title}</h1>
      <Content />
    </main>
  </article-scroll>
</BaseLayout>

<style>
  main {
    counter-reset: heading-counter;
  }

  main :global(h3) {
    font-size: var(--font-size-xl);
    margin-block-start: 2rem;
  }

  main :global(h2) {
    font-size: var(--font-size-2xl);
    margin-block-start: 5rem;
    position: relative;
  }

  main :global(h2:before) {
    counter-increment: heading-counter;
    content: counter(heading-counter);
    position: absolute;
    border-radius: calc(infinity * 1px);
    background: var(--color-gray-900);
    height: 2.4em;
    width: 2.4em;
    top: -1.1em;
    left: -1em;
    display: flex;
    z-index: -1;
    line-height: 1.3;
    color: var(--color-gray-600);
    font-size: var(--font-size-2xl);
    font-family: var(--font-family-heading);
    justify-content: center;
  }

  main :global(:is(h1, h2, h3, h4)) {
    font-weight: bold;
    line-height: 1.3;
  }

  main :global(p) {
    line-height: 1.5;
    margin-block: 0.8rem;
  }

  main :global(pre) {
    padding-inline: 1rem;
    padding-block: 1.3rem;
    border-radius: 0.4rem;
    line-height: 1.7;
    margin-block: 1rem;
  }
</style>

<script>
  import "../../components/article-scroll";
  import { controller, target } from "@github/catalyst";
  import { progress } from "../../components/article-scroll";

  @controller
  class ArticleScrollElement extends HTMLElement {
    @target declare progress: HTMLProgressElement;
    headings!: HTMLHeadingElement[];

    abortScroll!: AbortController;
    connectedCallback() {
      this.abortScroll = new AbortController();
      this.headings = [...this.querySelectorAll("h2")];
      document.addEventListener(
        "scroll",
        () => {
          const articleHeight = this.offsetTop + this.offsetHeight;
          progress.set(
            Math.min((window.scrollY + window.innerHeight) / articleHeight, 1)
          );
        },
        { signal: this.abortScroll.signal }
      );
    }
    disconnectedCallback() {
      this.abortScroll.abort();
    }
  }
</script>
