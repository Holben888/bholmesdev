---
import { type CollectionEntry } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import LikeButton from "../../components/LikeButton.astro";
import { Image } from "astro:assets";
import { getLikes } from "~/utils.server";
import { Redis } from "@upstash/redis/cloudflare";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((p) => ({ params: { slug: p.slug }, props: p }));
}

type Props = CollectionEntry<"blog">;

const post = Astro.props;
if (!post) return Astro.rewrite("/404");

const redis = Redis.fromEnv(Astro.locals.runtime.env);
const likes = await getLikes(redis, post.slug);

const { Content, headings } = await post.render();
---

<BaseLayout {headings}>
  <main class="max-w-prose mx-auto px-3 mb-24">
    <LikeButton postSlug={post.slug} />
    <article-scroll>
      {
        post.data.image && (
          <div class="aspect-video w-full overflow-hidden flex items-end rounded-lg">
            <Image
              class="aspect-[4/3] object-cover object-left w-full"
              src={post.data.image}
              alt=""
            />
          </div>
        )
      }
      <h1 class="text-4xl mt-12">{post.data.title}</h1>
      <Content />
    </article-scroll>
  </main>
</BaseLayout>

<style>
  main {
    counter-reset: heading-counter;
  }

  main :global(h3) {
    font-size: var(--font-size-xl);
    margin-block-start: 3rem;
  }

  main :global(h4) {
    font-size: var(--font-size-lg);
    margin-block-start: 2.5rem;
  }

  main :global(h2) {
    font-size: var(--font-size-2xl);
    margin-block-start: 5rem;
    position: relative;
  }

  main :global(h2:before) {
    counter-increment: heading-counter;
    content: counter(heading-counter);
    position: absolute;
    border-radius: calc(infinity * 1px);
    background: var(--color-gray-900);
    height: 2.4em;
    width: 2.4em;
    top: -1.1em;
    left: -1em;
    display: flex;
    z-index: -1;
    line-height: 1.3;
    color: var(--color-gray-600);
    font-size: var(--font-size-2xl);
    font-family: var(--font-family-heading);
    justify-content: center;
  }

  main :global(:is(h1, h2, h3, h4)) {
    font-weight: bold;
    line-height: 1.3;
  }

  main :global(ol) {
    list-style: decimal;
  }

  main :global(ul) {
    list-style: disc;
  }

  main :global(:is(ol, ul)) {
    padding-inline-start: 1.5rem;
  }

  main :global(:is(p, li)) {
    line-height: 1.7;
    margin-block: 1.3rem;
  }

  main :global(a) {
    color: var(--color-primary-light);
    text-decoration: underline;
  }

  main :global(li) {
    margin-block: 0.5rem;
  }

  main :global(pre) {
    padding-inline: 1rem;
    padding-block: 1.3rem;
    border-radius: 0.4rem;
    line-height: 1.7;
    margin-block: 1rem;
    font-size: var(--font-size-sm);
  }
</style>

<script>
  import "../../components/article-scroll";
  import { controller, target } from "@github/catalyst";
  import { progress, currentSectionIdx } from "../../components/article-scroll";

  @controller
  class ArticleScrollElement extends HTMLElement {
    @target progress: HTMLProgressElement;

    abortScroll!: AbortController;
    connectedCallback() {
      this.abortScroll = new AbortController();
      const headings = [...this.querySelectorAll("h2")];
      let waitingOnAnimRequest = false;

      document.addEventListener(
        "scroll",
        () => {
          if (waitingOnAnimRequest) return;
          window.requestAnimationFrame(() => {
            waitingOnAnimRequest = false;
            const articleRect = this.getBoundingClientRect();
            const articleHeight = this.offsetTop + articleRect.height;
            progress.value = Math.min(
              (window.scrollY + window.innerHeight) / articleHeight,
              1
            );
          });
          waitingOnAnimRequest = true;
        },
        { signal: this.abortScroll.signal }
      );
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (!entry.isIntersecting) return;
            if (headings.includes(entry.target as HTMLHeadingElement)) {
              currentSectionIdx.value = headings.indexOf(
                entry.target as HTMLHeadingElement
              );
            }
            let heading: HTMLHeadingElement | null = null;
            let previousSibling = entry.target.previousElementSibling;
            while (!heading && previousSibling) {
              previousSibling = previousSibling.previousElementSibling;
              if (
                previousSibling instanceof HTMLHeadingElement &&
                headings.includes(previousSibling)
              ) {
                heading = previousSibling;
              }
            }
            if (!heading) return;
            const idx = headings.indexOf(heading);
            if (idx >= 0) {
              currentSectionIdx.value = idx;
            }
          });
        },
        { rootMargin: "-49% 0px", threshold: 0 }
      );
      for (const element of this.children) {
        observer.observe(element);
      }
    }
    disconnectedCallback() {
      this.abortScroll.abort();
    }
  }
</script>
